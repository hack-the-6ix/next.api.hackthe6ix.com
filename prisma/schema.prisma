//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserType {
    USER
    ADMIN
    SUPER_ADMIN
}

/// @@allow('read', auth().userType == ADMIN || this.userType == USER)
/// @@allow('all', auth() == this || auth().userType == SUPER_ADMIN)
/// @@allow('create', true)
model User {
    id String @id() @default(cuid())
    firstName String
    lastName String
    /// @deny('update', auth().userType == USER)
    userType UserType @default(USER)
    basicAuth BasicAuth?
    googleAuth GoogleAuth?
}

/// @@allow('read', auth().userType == ADMIN)
/// @@allow('all', auth() == user || auth().userType == SUPER_ADMIN)
model BasicAuth {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
    /// @email
    email String @unique()
    /// @password
    /// @omit
    /// @length(8)
    password String
    verified Boolean @default(false)
}

/// @@allow('read', auth().userType == ADMIN)
/// @@allow('all', auth() == user || auth().userType == SUPER_ADMIN)
model GoogleAuth {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
    /// @email
    email String @unique()
    reference String @unique()
}

/// @@allow('read', live)
/// @@allow('all', auth().userType == SUPER_ADMIN || auth().userType == ADMIN)
model Form {
    id String @id() @default(cuid())
    title String
    description String?
    live Boolean @default(false)
    startAt DateTime
    endAt DateTime
    questions Question[]
}

/// @@allow('read', form.live)
/// @@allow('all', auth().userType == SUPER_ADMIN || auth().userType == ADMIN)
model Question {
    id String @id() @default(cuid())
    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId String
    label String
    description String?
    required Boolean
    text TextQuestion?
    number NumberQuestion?
}

/// @@allow('read', question.form.live)
/// @@allow('all', auth().userType == SUPER_ADMIN || auth().userType == ADMIN)
model TextQuestion {
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String @unique()
    defaultValue String?
    minLength Int?
    maxLength Int?
    regex String?
}

/// @@allow('read', question.form.live)
/// @@allow('all', auth().userType == SUPER_ADMIN || auth().userType == ADMIN)
model NumberQuestion {
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String @unique()
    defaultValue Int?
    minValue Int?
    maxValue Int?
    precision Int? @default(0)
}